// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "timetracker/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeTimetrackerModelsDto(in *jlexer.Lexer, out *RespUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "about":
			out.About = string(in.String())
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto(out *jwriter.Writer, in RespUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto1(in *jlexer.Lexer, out *RespTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto1(out *jwriter.Writer, in RespTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespTag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespTag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespTag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespTag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto1(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto2(in *jlexer.Lexer, out *RespProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(uint64)
				}
				*out.UserID = uint64(in.Uint64())
			}
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "is_private":
			out.IsPrivate = bool(in.Bool())
		case "total_count_hours":
			out.TotalCountHours = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto2(out *jwriter.Writer, in RespProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.UserID))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"total_count_hours\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalCountHours))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto2(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto3(in *jlexer.Lexer, out *RespGoal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(uint64)
				}
				*out.UserID = uint64(in.Uint64())
			}
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(uint64)
				}
				*out.ProjectID = uint64(in.Uint64())
			}
		case "hours_count":
			out.HoursCount = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto3(out *jwriter.Writer, in RespGoal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.UserID))
		}
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		if in.ProjectID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.ProjectID))
		}
	}
	{
		const prefix string = ",\"hours_count\":"
		out.RawString(prefix)
		out.Float64(float64(in.HoursCount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix)
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespGoal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespGoal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespGoal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespGoal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto3(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto4(in *jlexer.Lexer, out *RespEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(uint64)
				}
				*out.UserID = uint64(in.Uint64())
			}
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(uint64)
				}
				*out.ProjectID = uint64(in.Uint64())
			}
		case "description":
			out.Description = string(in.String())
		case "tag_list":
			if in.IsNull() {
				in.Skip()
				out.TagList = nil
			} else {
				in.Delim('[')
				if out.TagList == nil {
					if !in.IsDelim(']') {
						out.TagList = make([]models.Tag, 0, 1)
					} else {
						out.TagList = []models.Tag{}
					}
				} else {
					out.TagList = (out.TagList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.Tag
					(v1).UnmarshalEasyJSON(in)
					out.TagList = append(out.TagList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		case "duration":
			out.Duration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto4(out *jwriter.Writer, in RespEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.UserID))
		}
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		if in.ProjectID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.ProjectID))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tag_list\":"
		out.RawString(prefix)
		if in.TagList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TagList {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix)
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.String(string(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto4(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto5(in *jlexer.Lexer, out *ReqUserSignUp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "about":
			out.About = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "admin_token":
			out.AdminToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto5(out *jwriter.Writer, in ReqUserSignUp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"admin_token\":"
		out.RawString(prefix)
		out.String(string(in.AdminToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqUserSignUp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqUserSignUp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqUserSignUp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqUserSignUp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto5(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto6(in *jlexer.Lexer, out *ReqUserSignIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto6(out *jwriter.Writer, in ReqUserSignIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqUserSignIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqUserSignIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqUserSignIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqUserSignIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto6(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto7(in *jlexer.Lexer, out *ReqUpdateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "about":
			out.About = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto7(out *jwriter.Writer, in ReqUpdateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqUpdateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqUpdateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqUpdateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqUpdateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto7(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto8(in *jlexer.Lexer, out *ReqCreateUpdateTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "color":
			out.Color = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto8(out *jwriter.Writer, in ReqCreateUpdateTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateUpdateTag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateUpdateTag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateUpdateTag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateUpdateTag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto8(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto9(in *jlexer.Lexer, out *ReqCreateUpdateProject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "about":
			out.About = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "is_private":
			out.IsPrivate = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto9(out *jwriter.Writer, in ReqCreateUpdateProject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateUpdateProject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateUpdateProject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateUpdateProject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateUpdateProject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto9(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto10(in *jlexer.Lexer, out *ReqCreateUpdateGoal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(uint64)
				}
				*out.ProjectID = uint64(in.Uint64())
			}
		case "hours_count":
			out.HoursCount = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto10(out *jwriter.Writer, in ReqCreateUpdateGoal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		if in.ProjectID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.ProjectID))
		}
	}
	{
		const prefix string = ",\"hours_count\":"
		out.RawString(prefix)
		out.Float64(float64(in.HoursCount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix)
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateUpdateGoal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateUpdateGoal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateUpdateGoal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateUpdateGoal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto10(l, v)
}
func easyjson56de76c1DecodeTimetrackerModelsDto11(in *jlexer.Lexer, out *ReqCreateUpdateEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "project_id":
			if in.IsNull() {
				in.Skip()
				out.ProjectID = nil
			} else {
				if out.ProjectID == nil {
					out.ProjectID = new(uint64)
				}
				*out.ProjectID = uint64(in.Uint64())
			}
		case "description":
			out.Description = string(in.String())
		case "tag_list":
			if in.IsNull() {
				in.Skip()
				out.TagList = nil
			} else {
				in.Delim('[')
				if out.TagList == nil {
					if !in.IsDelim(']') {
						out.TagList = make([]uint64, 0, 8)
					} else {
						out.TagList = []uint64{}
					}
				} else {
					out.TagList = (out.TagList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 uint64
					v4 = uint64(in.Uint64())
					out.TagList = append(out.TagList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeTimetrackerModelsDto11(out *jwriter.Writer, in ReqCreateUpdateEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		if in.ProjectID == nil {
			out.RawString("null")
		} else {
			out.Uint64(uint64(*in.ProjectID))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tag_list\":"
		out.RawString(prefix)
		if in.TagList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TagList {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix)
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateUpdateEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeTimetrackerModelsDto11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateUpdateEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeTimetrackerModelsDto11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateUpdateEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeTimetrackerModelsDto11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateUpdateEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeTimetrackerModelsDto11(l, v)
}
