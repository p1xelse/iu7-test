// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	models "timetracker/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RepositoryI is an autogenerated mock type for the RepositoryI type
type RepositoryI struct {
	mock.Mock
}

// CreateEntry provides a mock function with given fields: e
func (_m *RepositoryI) CreateEntry(e *models.Entry) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entry) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntry provides a mock function with given fields: id
func (_m *RepositoryI) DeleteEntry(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntry provides a mock function with given fields: id
func (_m *RepositoryI) GetEntry(id uint64) (*models.Entry, error) {
	ret := _m.Called(id)

	var r0 *models.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Entry, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Entry); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEntries provides a mock function with given fields: userID
func (_m *RepositoryI) GetUserEntries(userID uint64) ([]*models.Entry, error) {
	ret := _m.Called(userID)

	var r0 []*models.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*models.Entry, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*models.Entry); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEntriesForDay provides a mock function with given fields: userID, date
func (_m *RepositoryI) GetUserEntriesForDay(userID uint64, date time.Time) ([]*models.Entry, error) {
	ret := _m.Called(userID, date)

	var r0 []*models.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, time.Time) ([]*models.Entry, error)); ok {
		return rf(userID, date)
	}
	if rf, ok := ret.Get(0).(func(uint64, time.Time) []*models.Entry); ok {
		r0 = rf(userID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, time.Time) error); ok {
		r1 = rf(userID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntry provides a mock function with given fields: e
func (_m *RepositoryI) UpdateEntry(e *models.Entry) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entry) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryI interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryI creates a new instance of RepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryI(t mockConstructorTestingTNewRepositoryI) *RepositoryI {
	mock := &RepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
